{"version":3,"sources":["components/Input.jsx","components/Form.jsx","components/Footer.jsx","components/App.jsx","index.js"],"names":["Input","props","type","placeholder","Form","useState","isLoggedIn","setIsLoggedIn","className","onClick","event","preventDefault","currentYear","Date","getFullYear","Footer","App","ReactDOM","render","document","getElementById"],"mappings":"yMAOeA,MALf,SAAeC,GACX,OAAO,2BAAOC,KAAMD,EAAMC,KAAMC,YAAaF,EAAME,eCgCxCC,MA/Bf,WAEE,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAQA,OACE,6BAEA,gCAAMD,EAAa,qBAAuB,QAA1C,KAEA,0BAAME,UAAU,QAEhB,kBAAC,EAAD,CACEN,KAAK,OACLC,YAAY,aAEd,kBAAC,EAAD,CACED,KAAK,WACLC,YAAY,aAEd,4BAAQM,QArBV,SAAqBC,GACnBH,GAAc,GAEdG,EAAMC,kBAkBwBT,KAAK,UAAnC,YC1BEU,GADO,IAAIC,MACQC,cAYVC,MAVf,WACI,OAEI,gCACI,0DAA6BH,EAA7B,OCQGI,MAZf,WACE,OACE,yBAAKR,UAAU,aACf,kBAAC,EAAD,MAEE,6BACA,kBAAC,EAAD,SCPNS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.97f73a11.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Input(props){\n    return <input type={props.type} placeholder={props.placeholder} />\n            \n}\n\nexport default Input;\n\n\n\n\n/* <input type=\"password\" placeholder=\"Password\" />\n<input type=\"password\" placeholder=\"Confirm Password\" />  */\n","import React, { useState } from \"react\";\nimport Input from \"./Input\";\n\n\nfunction Form() {\n  \n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  function handleClick(event){\n    setIsLoggedIn(true);\n    \n    event.preventDefault();\n  }\n\n  return (\n    <div>\n    \n    <h1> {isLoggedIn ? \"You are logged in!\" : \"Hello\"} </h1>\n    \n    <form className=\"form\">\n      \n    <Input \n      type=\"text\"\n      placeholder=\"Username\"\n    /> \n    <Input \n      type=\"password\"\n      placeholder=\"Password\"\n    /> \n    <button onClick={handleClick} type=\"submit\">Login</button>\n    </form>\n    </div>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\n\nconst date = new Date();\nconst currentYear = date.getFullYear();\n\nfunction Footer() {\n    return (\n        \n        <footer>\n            <p>Copyright © Breno Bonani {currentYear} </p>\n        </footer>\n    \n    );\n}\n\nexport default Footer;","import React from \"react\";\nimport Form from \"./Form\";\nimport Footer from \"./Footer\"\n\n\nfunction App() {\n  return (\n    <div className=\"container\">{\n    <Form />\n    }\n      <div>\n      <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n/* \n\nTernary Operator, funciona basicamente como um if/else, mas não é considera um statement (uma declaração) e sim uma expressão. o que permite\ncolocar ele dentro de funções para fazer o mesmo papel de um if/else. Um exemplo, é quando queremos que caso alguem logue, apareça uma mensagem\ne muda para outro statement. Exemplo:\n\n\nlet isLoggedIn = false;\n\nfunction App() {\n  return (\n    <div className=\"container\">{\n\n    isLoggedIn ?\n      <h1> You are logged in! </h1>\n    :\n    <Form />\n    }\n      <div>\n      <Footer />\n      </div>\n    </div>\n  );\n}\n\nO Ternary Operator funciona dessa forma, você primeiro vai colocar o que você quer condicionar. isLoggedIn === true ? É como se fosse uma pergunta msm.\nSe sim, vai mostrar o <h1>. Caso não seja, precisa usar : e colocar o que vai acontecer, que no caso, vai ser renderizar o <Form /> para login.\n\nEu posso usar o && (and) para ter duas expressões condicionais. Um exemplo:\n\nlet x = 5;\n\nx > 3 && x < 7 ? <h1> true </h1> : <h1> false </h1>\n\nMas, caso o primeiro valor usando && seja falso, JS vai ignorar toda a sentença e vai ser considerada falso. Isso é bom quando você quer mostrar algo\nem um horário especifico, mas em outro horário não. Exemplo:\n\nconst currentTime = new Date().getHours();\n\nconsole.log(currentTime);\n\nfunction App() {\n  return <div className=\"container\"> {\n    currentTime > 12 && <h1>Why are you still working?</h1>\n  } </div>\n}\n\nNeste caso, vamos supor que a hora fosse 6 horas, então não mostraria nada, pq currentTime não seria maior que 12, logo, seria false e todo o resto fica\nria false também. Isso é bom, pq não precisamos escrever toda declaração condicional e no fim ainda colocar \": null\".\n\nUma forma de também colocar uma condicional como false, mas não precisar usar \"=== false\", é colocar ! antes dela. Exemplo:\n\n{!props.IsRegistered && (<input type=\"password\" placeholder=\"Confirm Password\" />) }\n\n!props.IsRegistered é a mesma coisa que falar \"=== false\".\n\n*/","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n"],"sourceRoot":""}